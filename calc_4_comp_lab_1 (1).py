# -*- coding: utf-8 -*-
"""Calc 4 Comp Lab 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13SyixcDuwS_elBDyERzywhejv8_P1xeT
"""

#Question 1

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

logistic_eq = lambda x, t: (1 - x) * x


sns.set_context('talk')
sns.set_style("whitegrid")
plt.rcParams.update({
'axes.titlesize': 20,
'axes.titleweight': 'bold',
'axes.labelsize': 14,
'axes.labelweight': 'regular',
'legend.fontsize': 12,
'legend.title_fontsize': 14,
'xtick.labelsize': 12,
'ytick.labelsize': 12,
})

def eulersMethod(function, initx, stepsize, numsteps, inittime):
  x_vals=[]

  currx = initx
  currtime = inittime

  for i in range(numsteps):
    currx += stepsize*function(currx, currtime)
    currtime+=stepsize
    x_vals.append(currx)

  return currx, x_vals

#Question 2

function = lambda x, t: (1 - x) * x
x, eulerSolution = eulersMethod(function, 0.5, 0.01, 500, 0)

time = np.arange(0, 5, 0.01)
actual = 1 / (1 + np.exp(-time))
plt.plot(time, actual)
plt.plot(time, eulerSolution,'--')
plt.title("Euler's Method vs Actual Solution for Logistic Equation")
plt.xlabel("Time")
plt.ylabel("x Values")
plt.legend(["Euler's Method Approximation", "Actual Solution"])
plt.show()

residual = np.abs(actual - eulerSolution)
plt.plot(time, residual)
plt.title("Residual plot")
plt.xlabel("Time")
plt.annotate(f"Max residual: {max(residual):.3e}", (0.05, 0.0001))
plt.show

#Question 3

from math import cos, exp

x_prime = lambda x, t: cos(pow(x, 3)) - cos(pow(x, 2) - 3*t)
x, eulerSolution = eulersMethod(x_prime, 1, 0.01, 500, 0)

time = np.arange(0, 5, 0.01)
plt.plot(time, eulerSolution, "--")
plt.title("Euler's Method Approximation for v(x) = cos(x^3) - cos(x^2 - 3t)")
plt.xlabel("X Value")
plt.legend(["Euler's Method Approximation", "Actual Solution"])
plt.show()

#Question 4

x_prime = lambda x, t: -201 * x
x, eulerSolution = eulersMethod(x_prime, 1, 0.01, 50, 0)

time = np.arange(0, 0.5, 0.01)
actual = np.exp(-201 * time)
plt.plot(time, eulerSolution)
plt.plot(time, actual)
plt.title("Euler's Method vs Actual Solution")
plt.xlabel("Time")
plt.ylabel("x-Value")

plt.legend(["Euler's Method", "Actual Solution"])
plt.show()

#Question 5

#Implicit function for xₙ₊₁:
# xₙ₊₁ = xₙ/(1+201h)

h = 0.01
x_n_plus_1 = lambda x_n: x_n / (1 + 201 * h)
time = np.arange(0, 0.5, 0.01)
actual = np.exp(-201 * time)
solution = [1]
for i in range(49):
  solution.append(x_n_plus_1(solution[-1]))
plt.plot(time, solution)
plt.plot(time, actual)
plt.title("Backward Euler's Method")
plt.xlabel("Time")
plt.ylabel("x_Value")
plt.legend(["Backward Euler's Method", "Actual Solution"])
plt.show()

#Question 6


h = 0.01
x_start, time_start, N = 0.5, 0, int(.5/0.01)
v = lambda x, t: (1 - x) * x
x_n_plus_1 = lambda x_n, n: x_n + h * v(x_n + h * v(x_n, n*h)/2, n*h + h/2)
time = np.arange(0, 0.5, h)
actual = 1 / (1 + np.exp(-time))
midpointSolution = [x_start]

for i in range(N-1):
  midpointSolution.append(x_n_plus_1(midpointSolution[-1], i+1))

x, eulers_solution = eulersMethod(v, x_start, h, N, 0)

plt.plot(time, actual,'-')
plt.plot(time, midpointSolution,'--')
plt.plot(time, eulers_solution,'--')

plt.title("Midpoint Method vs Euler's Method")
plt.xlabel("Time")
plt.ylabel("x Values")

plt.legend(["Actual Solution", "Midpoint Method", "Euler's Method"])
plt.show()

residual = np.abs(actual - midpointSolution)
euler_residual = np.abs(actual - eulers_solution)

plt.plot(time, residual)
plt.plot(time, euler_residual)

plt.legend(["Midpoint Method", "Euler's Method"])
plt.xlabel("Time")
plt.ylabel("x Value")


plt.annotate(f"Max residual: {max(euler_residual):.3e}", xy=(time[-1], max(euler_residual)))
plt.xlim(0, 0.5)
plt.annotate(f"Max residual: {max(residual):.3e}", xy=(time[-1], max(residual)))
plt.show()